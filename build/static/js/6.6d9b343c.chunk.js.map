{"version":3,"sources":["services/fetchApi.js","services/slug.js","pages/MoviesPage/MoviesPage.module.css","pages/MoviesPage/MoviesPage.jsx"],"names":["axios","defaults","baseURL","API_KEY","fetchTrendingMovies","a","queryString","get","movies","data","searchMovies","stringToSearch","getMovieDetails","movieId","movie","getMovieCast","getReviews","makeSlug","string","slugify","lower","getIdFromSlug","slug","match","module","exports","MoviesPage","useState","movieToFind","setMovieToFind","foundMovies","setFoundMovies","location","useLocation","history","useHistory","useEffect","searchString","URLSearchParams","search","getMovies","results","handleSubmit","e","preventDefault","trim","length","Notiflix","Notify","warning","push","className","s","moviesPage","mainContainer","onSubmit","searchForm","type","placeholder","value","onChange","target","searchForm__input","searchForm__button","moviesList","map","id","title","poster_path","moviesList__item","to","pathname","state","from","label","src","alt","moviesList__movieTitle"],"mappings":"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","file":"static/js/6.6d9b343c.chunk.js","sourcesContent":["import axios from \"axios\";\n\naxios.defaults.baseURL = \"https://api.themoviedb.org/3/\";\nconst API_KEY = \"74a210d9545ac2133ea9f3ec78679de8\";\n\nexport const fetchTrendingMovies = async () => {\n  const queryString = `trending/movie/day?api_key=${API_KEY}`;\n\n  const { data: movies } = await axios.get(queryString);\n\n  return movies;\n};\n\nexport const searchMovies = async (stringToSearch) => {\n  const queryString = `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${stringToSearch}`;\n\n  const { data: movies } = await axios.get(queryString);\n\n  return movies;\n};\n\nexport const getMovieDetails = async (movieId) => {\n  const queryString = `movie/${movieId}?api_key=${API_KEY}&language=en-US`;\n\n  const { data: movie } = await axios.get(queryString);\n\n  return movie;\n};\n\nexport const getMovieCast = async (movieId) => {\n  const queryString = `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`;\n\n  const { data } = await axios.get(queryString);\n\n  return data;\n};\n\nexport const getReviews = async (movieId) => {\n  const queryString = `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`;\n\n  const { data } = await axios.get(queryString);\n\n  return data;\n};\n","import slugify from \"slugify\";\n\nexport const makeSlug = (string) =>\n  slugify(string, {\n    lower: true,\n  });\n\nexport const getIdFromSlug = (slug) => slug.match(/[a-z0-9]+$/)[0];\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"moviesPage\":\"MoviesPage_moviesPage__1keIt\",\"mainContainer\":\"MoviesPage_mainContainer__24Xru\",\"searchForm\":\"MoviesPage_searchForm__3_GqO\",\"searchForm__input\":\"MoviesPage_searchForm__input__3rTMD\",\"searchForm__button\":\"MoviesPage_searchForm__button__3C7x1\",\"moviesList\":\"MoviesPage_moviesList__2QzHZ\",\"moviesList__item\":\"MoviesPage_moviesList__item__32b8N\",\"moviesList__movieTitle\":\"MoviesPage_moviesList__movieTitle__3FMFA\"};","import React, { useEffect, useState } from \"react\";\nimport { Link, useLocation, useHistory } from \"react-router-dom\";\nimport Notiflix from \"notiflix\";\nimport { searchMovies } from \"../../services/fetchApi\";\nimport { makeSlug } from \"../../services/slug\";\nimport s from \"./MoviesPage.module.css\";\n\nconst MoviesPage = () => {\n  const [movieToFind, setMovieToFind] = useState(\"\");\n  const [foundMovies, setFoundMovies] = useState([]);\n\n  const location = useLocation();\n  const history = useHistory();\n\n  useEffect(() => {\n    const searchString = new URLSearchParams(location.search).get(\"query\");\n\n    if (searchString) {\n      const getMovies = async () => {\n        const { results } = await searchMovies(searchString);\n\n        setFoundMovies(results);\n        setMovieToFind(\"\");\n      };\n\n      getMovies();\n    }\n  }, [location.search]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (movieToFind.trim()) {\n      const { results } = await searchMovies(movieToFind);\n\n      setFoundMovies(results);\n      setMovieToFind(\"\");\n\n      if (results.length === 0) {\n        Notiflix.Notify.warning(\n          \"No movies found! Please change your request and try again\"\n        );\n      }\n\n      history.push({\n        ...location,\n        search: `query=${movieToFind}`,\n      });\n    }\n  };\n\n  return (\n    <section className={s.moviesPage}>\n      <div className={s.mainContainer}>\n        <form onSubmit={handleSubmit} className={s.searchForm}>\n          <input\n            type=\"text\"\n            placeholder=\"Find movie\"\n            value={movieToFind}\n            onChange={(e) => setMovieToFind(e.target.value)}\n            className={s.searchForm__input}\n          />\n\n          <button type=\"submit\" className={s.searchForm__button}>\n            Search\n          </button>\n        </form>\n\n        {foundMovies.length > 0 && (\n          <ul className={s.moviesList}>\n            {foundMovies.map(({ id, title, poster_path }) => (\n              <li className={s.moviesList__item} key={id}>\n                <Link\n                  to={{\n                    pathname: `/movies/${makeSlug(`${title} ${id}`)}`,\n                    state: {\n                      from: {\n                        location,\n                        label: \"Back to Movies\",\n                      },\n                    },\n                  }}\n                >\n                  <img\n                    src={\n                      poster_path\n                        ? `https://image.tmdb.org/t/p/w300${poster_path}`\n                        : \"https://pomogaetsrazu.ru/images/offers/2829219234.jpg\"\n                    }\n                    alt={title}\n                  />\n                  <p className={s.moviesList__movieTitle}>{title}</p>\n                </Link>\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n\n      <div></div>\n    </section>\n  );\n};\n\nexport default MoviesPage;\n"],"sourceRoot":""}